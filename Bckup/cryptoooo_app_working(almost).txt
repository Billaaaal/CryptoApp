package com.example.cryptoapp

import android.os.Bundle
import android.util.Log
import android.widget.Button
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.chaquo.python.PyObject
import com.chaquo.python.Python
import com.chaquo.python.android.AndroidPlatform

class MainActivity : AppCompatActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        supportActionBar?.hide()

        initPython()
        var current = ""

        var recyclerview = findViewById<RecyclerView>(R.id.recyclerview)

        //var adapter: CustomAdapter? = null




        var data = initialize()

        var adapter = data?.let { CustomAdapter(it) }



        //current = initialize()

        //Log.i("INITIAL", current.toString())

        //Toast.makeText(this@MainActivity, current, Toast.LENGTH_SHORT).show()

        var refresh = findViewById<androidx.swiperefreshlayout.widget.SwipeRefreshLayout>(R.id.refresh)

        //val button = findViewById<Button>(R.id.button)

        // button.setOnClickListener {
        //    initPython()
        //    refresh_list()

        //}

        refresh.setOnRefreshListener {
            //Log.i("INITIAL", returned.toString())
            //Log.i("NEW", getRequest().toString())

            //current = initialize()
            Toast.makeText(this@MainActivity, data.toString(), Toast.LENGTH_SHORT).show()

            data?.clear()

            //var data = ArrayList<ItemsViewModel>()

            //data!!.add(ItemsViewModel(R.drawable.ic_baseline_folder_24, "coin_name", "coin_symbol", "coin_rank", "coin_price", "coin_change_percentage","change_status", "https://images.genius.com/071a819f088609ee9d24b2dba4546b23.1000x1000x1.jpg"))

            var returned = getRequest()

            data!!.add(ItemsViewModel(R.drawable.ic_baseline_folder_24, "coin_name", "coin_symbol", "coin_rank", "coin_price", "coin_change_percentage","change_status", "https://images.genius.com/071a819f088609ee9d24b2dba4546b23.1000x1000x1.jpg"))


            for (crypto in returned){

                var crypto = crypto.asList()

                var coin_name = crypto[0].toString()
                var coin_symbol = crypto[1].toString()
                var coin_rank = crypto[2].toString()
                var coin_price = crypto[3].toString()
                var coin_change_percentage = crypto[4].toString()
                var change_status = crypto[5].toString()
                var coin_image = crypto[6].toString()


                //var coin_name = "Name"
                //var coin_symbol ="Symbol"
                //var coin_rank = "R"
                //var coin_price = "Price"
                //var coin_change_percentage = "Perc."
                //var coin_image = " "



                //Toast.makeText(this@MainActivity, crypto[0].toString(), Toast.LENGTH_SHORT).show()


                //Toast.makeText(this@MainActivity, coin_name, Toast.LENGTH_SHORT).show()



                data.add(ItemsViewModel(R.drawable.ic_baseline_folder_24, coin_name, coin_symbol, coin_rank, coin_price, coin_change_percentage,change_status, coin_image))



                //data.add(ItemsViewModel(R.drawable.ic_baseline_folder_24, coin_name, coin_symbol, coin_rank, coin_price, coin_change_percentage,change_status, coin_image))


            }




            recyclerview.adapter!!.notifyDataSetChanged()

            //recyclerview.adapter = adapter

            //change getrequest
            //if (current == getRequest().toString()){
            //    Toast.makeText(this@MainActivity, "Up to date", Toast.LENGTH_SHORT).show()
            //    refresh.isRefreshing = false
            Toast.makeText(this@MainActivity, "Not up to date", Toast.LENGTH_SHORT).show()
            //}
            //else{
            //    //Toast.makeText(this@MainActivity, "Not up to date", Toast.LENGTH_SHORT).show()
                //current = getRequest().toString()
            //    current = initialize()
            refresh.isRefreshing = false


            //}
            //    Toast.makeText(this@MainActivity, "Up to date".toString(), Toast.LENGTH_SHORT).show()
            //    refresh.isRefreshing = false
            //
            //}else{
            //    //refresh()
            //    initialize()
            //    refresh.isRefreshing = false

            //}


        }



    }



    fun initialize():ArrayList<ItemsViewModel>{//:MutableList<PyObject>{
        // getting the recyclerview by its id


        // This loop will create 20 Views containing
        // the image with the count of view
        //for (i in 1..20) {
        //data.add(ItemsViewModel(R.drawable.ic_baseline_folder_24, "Item $i"))
        //}

        var returned = getRequest()

        var data = ArrayList<ItemsViewModel>()

        if (returned.joinToString("")=="error"){
            Toast.makeText(this@MainActivity, "Connection error", Toast.LENGTH_SHORT).show()
            return data
        }else{

            var recyclerview = findViewById<RecyclerView>(R.id.recyclerview)

            // this creates a vertical layout Manager
            recyclerview.layoutManager = LinearLayoutManager(this)

            // ArrayList of class ItemsViewModel
            var data = ArrayList<ItemsViewModel>()
            //('Ethereum', 'eth', 2, 2457.99, 'https://assets.coingecko.com/coins/images/279/large/ethereum.png?1595348880', -0.1565)


            //val he = returned[0]

            //val hez = he[0]

            //var nameOfClass = he::class.simpleName

            //Toast.makeText(this@MainActivity, sar, Toast.LENGTH_SHORT).show()

            for (crypto in returned){

                var crypto = crypto.asList()

                var coin_name = crypto[0].toString()
                var coin_symbol = crypto[1].toString()
                var coin_rank = crypto[2].toString()
                var coin_price = crypto[3].toString()
                var coin_change_percentage = crypto[4].toString()
                var change_status = crypto[5].toString()
                var coin_image = crypto[6].toString()


                //var coin_name = "Name"
                //var coin_symbol ="Symbol"
                //var coin_rank = "R"
                //var coin_price = "Price"
                //var coin_change_percentage = "Perc."
                //var coin_image = " "



                //Toast.makeText(this@MainActivity, crypto[0].toString(), Toast.LENGTH_SHORT).show()


                //Toast.makeText(this@MainActivity, coin_name, Toast.LENGTH_SHORT).show()



                data.add(ItemsViewModel(R.drawable.ic_baseline_folder_24, coin_name, coin_symbol, coin_rank, coin_price, coin_change_percentage,change_status, coin_image))



                //data.add(ItemsViewModel(R.drawable.ic_baseline_folder_24, coin_name, coin_symbol, coin_rank, coin_price, coin_change_percentage,change_status, coin_image))


            }


            // This will pass the ArrayList to our Adapter
            var adapter = CustomAdapter(data)

            // Setting the Adapter with the recyclerview
            recyclerview.adapter = adapter

            //var returned = getRequest()

            //var current = getRequest()

            //return "PASSED"

            //return getRequest().toString()



            //return returned.toString()

            return data




            //val he = returned[0]

            //val hez = he[0]

            //var nameOfClass = he::class.simpleName

            //for (crypto in returned){

            //    var crypto = crypto.asList()

            //    Toast.makeText(this@MainActivity, crypto[0].toString(), Toast.LENGTH_SHORT).show()

            //}

            //Toast.makeText(this@MainActivity, returned.toString(), Toast.LENGTH_SHORT).show()
            //Log.i("TAG", returned.toString())


        }




    }

    private fun initPython(){
        if (!Python.isStarted()){
            Python.start(AndroidPlatform(this))

        }

    }

    private fun getRequest(): MutableList<PyObject> {
        var python = Python.getInstance()
        var pythonFile = python.getModule("crypto_get")
        return pythonFile.callAttr("get_crypto").asList() //return pythonFile.callAttr("main_request", userInput).toString()




    }

    fun refresh(){



        //refresh()


    }
}